<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [PMU_controller_STM32U5\PMU_controller_STM32U5.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image PMU_controller_STM32U5\PMU_controller_STM32U5.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Aug 10 03:00:26 2022
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AD5522_SetClamp_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[77]">ADC4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">ADC4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_IRQHandler</a> from stm32u5xx_it.o(.text.ADC1_IRQHandler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[77]">ADC4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[76]">ADF1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32u5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[52]">COMP_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[81]">CORDIC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[54]">CRS_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[30]">DAC1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[75]">DCACHE1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7d]">DCMI_PSSI_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7c]">DMA2D_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32u5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[31]">FDCAN1_IT0_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[12]">FLASH_S_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[82]">FMAC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[55]">FMC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[27]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5c]">GPDMA1_Channel10_IRQHandler</a> from stm32u5xx_it.o(.text.GPDMA1_Channel10_IRQHandler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5d]">GPDMA1_Channel11_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5e]">GPDMA1_Channel12_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5f]">GPDMA1_Channel13_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[60]">GPDMA1_Channel14_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[61]">GPDMA1_Channel15_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2a]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2b]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2c]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2d]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2e]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5a]">GPDMA1_Channel8_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5b]">GPDMA1_Channel9_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[13]">GTZC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[69]">HASH_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32u5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[41]">I2C1_EV_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[44]">I2C2_ER_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[43]">I2C2_EV_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6c]">I2C4_ER_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6d]">I2C4_EV_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[73]">ICACHE_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[26]">IWDG_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[78]">LPDMA1_Channel0_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[79]">LPDMA1_Channel1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7a]">LPDMA1_Channel2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7b]">LPDMA1_Channel3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4d]">LPTIM1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4e]">LPTIM2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6a]">LPTIM3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[74]">LPTIM4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4c]">LPUART1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6e]">MDF1_FLT0_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6f]">MDF1_FLT1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[70]">MDF1_FLT2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[71]">MDF1_FLT3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7f]">MDF1_FLT4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[80]">MDF1_FLT5_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32u5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32u5xx_it.o(.text.NMI_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[56]">OCTOSPI1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7e]">OCTOSPI2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from stm32u5xx_it.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[57]">PWR_S3WU_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32u5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[10]">RAMCFG_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[15]">RCC_S_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[67]">RNG_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[e]">RTC_S_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[65]">SAI2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[58]">SDMMC1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[59]">SDMMC2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[46]">SPI2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6b]">SPI3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32u5xx_it.o(.text.SVC_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32u5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_stm32u5xx.o(.text.SystemInit) referenced from startup_stm32u575xx.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4f]">TIM15_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[50]">TIM16_IRQHandler</a> from stm32u5xx_it.o(.text.TIM16_IRQHandler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[51]">TIM17_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3a]">TIM5_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3b]">TIM6_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[66]">TSC_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[72]">UCPD1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[49]">USART3_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32u5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32u575xx.o(.text) referenced from startup_stm32u575xx.o(RESET)
 <LI><a href="#[84]">__main</a> from __main.o(!!!main) referenced from startup_stm32u575xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[185]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[187]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[188]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[189]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[88]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[18a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[190]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[191]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[192]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[193]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[194]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[195]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[196]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[197]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[198]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[199]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[19e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[19f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AD5522_SetClamp_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[91]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[93]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ADF1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DCACHE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPDMA1_Channel11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPDMA1_Channel12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPDMA1_Channel13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPDMA1_Channel14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPDMA1_Channel15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPDMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPDMA1_Channel9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>LPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>LPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>LPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>MDF1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>MDF1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>MDF1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>MDF1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MDF1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MDF1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PWR_S3WU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32u575xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a9]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[97]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1af]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[90]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[94]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1b3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>AD5522_Calibrate</STRONG> (Thumb, 1012 bytes, Stack size 40 bytes, ad5522.o(.text.AD5522_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5522_Calibrate &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>AD5522_SetClamp</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, ad5522.o(.text.AD5522_SetClamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AD5522_SetClamp &rArr; AD5522_SetPMU &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRsense
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetPMU
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[a0]"></a>AD5522_SetClamp_float</STRONG> (Thumb, 1248 bytes, Stack size 248 bytes, ad5522.o(.text.AD5522_SetClamp_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = AD5522_SetClamp_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRsense
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>AD5522_SetOutputVoltage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ad5522.o(.text.AD5522_SetOutputVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5522_SetOutputVoltage &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_StartFVMI
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
</UL>

<P><STRONG><a name="[aa]"></a>AD5522_SetOutputVoltage_float</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, ad5522.o(.text.AD5522_SetOutputVoltage_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AD5522_SetOutputVoltage_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>AD5522_SetPMU</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ad5522.o(.text.AD5522_SetPMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5522_SetPMU &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_StartFVMI
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp
</UL>

<P><STRONG><a name="[ab]"></a>AD5522_SetSystemControl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ad5522.o(.text.AD5522_SetSystemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5522_SetSystemControl &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_init
</UL>

<P><STRONG><a name="[ac]"></a>AD5522_StartFVMI</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ad5522.o(.text.AD5522_StartFVMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AD5522_StartFVMI &rArr; AD5522_SetPMU &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRsense
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetPMU
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>AD5522_WriteReg</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ad5522.o(.text.AD5522_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetSystemControl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetPMU
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_Calibrate
</UL>

<P><STRONG><a name="[af]"></a>AD5522_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ad5522.o(.text.AD5522_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AD5522_init &rArr; AD5522_SetPMU &rArr; AD5522_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetSystemControl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetPMU
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32u5xx_it.o(.text.ADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC1_IRQHandler &rArr; HAL_ADC_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>ADC_Disable</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32u5xx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Disable &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDisableOngoing
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[b6]"></a>ADC_Enable</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32u5xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Enable &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[5c]"></a>GPDMA1_Channel10_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32u5xx_it.o(.text.GPDMA1_Channel10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPDMA1_Channel10_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, stm32u5xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 3116 bytes, Stack size 184 bytes, stm32u5xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSignedSaturation
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSign
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChRem
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChAdd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_ADC_Init</STRONG> (Thumb, 1716 bytes, Stack size 88 bytes, stm32u5xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetGainCompensation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonClock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDeepPowerDownEnabled
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableDeepPowerDown
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 276 bytes, Stack size 264 bytes, stm32u5xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32u5xx_hal_adc.o(.text.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_Start_IT &rArr; ADC_Enable &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_DMAEx_List_Init</STRONG> (Thumb, 898 bytes, Stack size 24 bytes, stm32u5xx_hal_dma_ex.o(.text.HAL_DMAEx_List_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMAEx_List_Init &rArr; DMA_List_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_List_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_DMA_ConfigChannelAttributes</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_ConfigChannelAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_ConfigChannelAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, stm32u5xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel10_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32u5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 984 bytes, Stack size 28 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32u5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32u5xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[b5]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32u5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_List_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[13c]"></a>HAL_ICACHE_ConfigAssociativityMode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32u5xx_hal_icache.o(.text.HAL_ICACHE_ConfigAssociativityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ICACHE_ConfigAssociativityMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32u5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32u5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[de]"></a>HAL_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32u5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_InitTick</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32u5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_MspInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32u5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_VREFBUF_VoltageScalingConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_VREFBUF_HighImpedanceConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddA
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32u5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd_ex.o(.text.HAL_PCDEx_ActivateLPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_ActivateLPM
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd_ex.o(.text.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[109]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_DisconnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 2188 bytes, Stack size 56 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_PCD_Init</STRONG> (Thumb, 708 bytes, Stack size 120 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 264 bytes, Stack size 248 bytes, stm32u5xx_hal_msp.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_SOFCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[101]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32u5xx_hal_pcd.o(.text.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_PWREx_EnableVddA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddA))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[150]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>

<P><STRONG><a name="[112]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[14a]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32u5xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[114]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[115]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[116]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[113]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 5540 bytes, Stack size 168 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2378 bytes, Stack size 64 bytes, stm32u5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1320 bytes, Stack size 40 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[119]"></a>HAL_RCC_GetPCLK3Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK3Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 612 bytes, Stack size 44 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 4288 bytes, Stack size 80 bytes, stm32u5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13f]"></a>HAL_SPIEx_SetConfigAutonomousMode</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, stm32u5xx_hal_spi_ex.o(.text.HAL_SPIEx_SetConfigAutonomousMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SPIEx_SetConfigAutonomousMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_SPI_Init</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 224 bytes, Stack size 264 bytes, stm32u5xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 1110 bytes, Stack size 48 bytes, stm32u5xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_WriteReg
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SYSCFG_EnableVREFBUF</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32u5xx_hal.o(.text.HAL_SYSCFG_EnableVREFBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SYSCFG_EnableVREFBUF
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SYSCFG_VREFBUF_HighImpedanceConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_hal.o(.text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSCFG_VREFBUF_HighImpedanceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SYSCFG_VREFBUF_VoltageScalingConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_hal.o(.text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSCFG_VREFBUF_VoltageScalingConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32u5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32u5xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32u5xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 364 bytes, Stack size 12 bytes, stm32u5xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32u5xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32u5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32u5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_UART_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32u5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 168 bytes, Stack size 240 bytes, stm32u5xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>LL_GPIO_Init</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UCPD1_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32u5xx_it.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SetRsense</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, ad5522.o(.text.SetRsense))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetRsense
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_StartFVMI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32u5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>SystemClock_Config</STRONG> (Thumb, 158 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, system_stm32u5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>TIM16_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32u5xx_it.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TIM16_IRQHandler &rArr; AD5522_SetOutputVoltage_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_waveform
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 726 bytes, Stack size 12 bytes, stm32u5xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[12e]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 328 bytes, Stack size 4 bytes, stm32u5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12f]"></a>UART_CheckIdleState</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32u5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12d]"></a>UART_SetConfig</STRONG> (Thumb, 856 bytes, Stack size 48 bytes, stm32u5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[154]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, stm32u5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[102]"></a>USB_ActivateSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32u5xx_ll_usb.o(.text.USB_ActivateSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>USB_CoreInit</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, stm32u5xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[111]"></a>USB_DevDisconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32u5xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[10f]"></a>USB_DevInit</STRONG> (Thumb, 658 bytes, Stack size 112 bytes, stm32u5xx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[10c]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32u5xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[fa]"></a>USB_EP0_OutStart</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32u5xx_ll_usb.o(.text.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[ee]"></a>USB_EPStopXfer</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, stm32u5xx_ll_usb.o(.text.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[158]"></a>USB_FlushRxFifo</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32u5xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[fc]"></a>USB_FlushTxFifo</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32u5xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[103]"></a>USB_GetDevSpeed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32u5xx_ll_usb.o(.text.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>USB_GetMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_ll_usb.o(.text.USB_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[f8]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllInEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllOutEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>USB_ReadInterrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>USB_ReadPacket</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, stm32u5xx_ll_usb.o(.text.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>USB_SetCurrentMode</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32u5xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[157]"></a>USB_SetDevSpeed</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32u5xx_ll_usb.o(.text.USB_SetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[105]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32u5xx_ll_usb.o(.text.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>USB_WritePacket</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stm32u5xx_ll_usb.o(.text.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32u5xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u575xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>get_waveform</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, waveform.o(.text.get_waveform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_waveform
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>main</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = main &rArr; AD5522_SetClamp_float &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UCPD1_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPDMA1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_StartFVMI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[168]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a3]"></a>__hardfp_pow</STRONG> (Thumb, 3088 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[165]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15a]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[161]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[162]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15f]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15e]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b6]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b8]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b9]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1ba]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[16e]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[172]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[170]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[171]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[173]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1bc]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[174]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[175]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[178]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[176]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[16c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[177]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[179]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[169]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17b]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[17c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[17e]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[17f]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[180]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[181]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetOutputVoltage_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5522_SetClamp_float
</UL>

<P><STRONG><a name="[182]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[183]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[17d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[89]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1c2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1c3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[16f]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[167]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[184]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[143]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UCPD1_Init
</UL>

<P><STRONG><a name="[142]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UCPD1_Init
</UL>

<P><STRONG><a name="[137]"></a>MX_ADC1_Init</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, main.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MX_GPDMA1_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main.o(.text.MX_GPDMA1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPDMA1_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_ConfigChannelAttributes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_List_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_GPIO_Init</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>MX_ICACHE_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.MX_ICACHE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_ICACHE_Init &rArr; HAL_ICACHE_ConfigAssociativityMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_ConfigAssociativityMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_SPI1_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPIEx_SetConfigAutonomousMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>MX_TIM16_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_UCPD1_Init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, main.o(.text.MX_UCPD1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_UCPD1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>MX_USB_OTG_FS_PCD_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(.text.MX_USB_OTG_FS_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = MX_USB_OTG_FS_PCD_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>SystemPower_Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.SystemPower_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemPower_Config &rArr; HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_it.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>LL_ADC_Disable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[cd]"></a>LL_ADC_DisableDeepPowerDown</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_DisableDeepPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableDeepPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b7]"></a>LL_ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[cf]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_EnableInternalRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[c5]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_GetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[bf]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>LL_ADC_IsDeepPowerDownEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_IsDeepPowerDownEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDeepPowerDownEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b2]"></a>LL_ADC_IsDisableOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_IsDisableOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDisableOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[b3]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[ce]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsInternalRegulatorEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bd]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c8]"></a>LL_ADC_REG_SetSequencerChAdd</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_REG_SetSequencerChAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_REG_SetSequencerChAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c9]"></a>LL_ADC_REG_SetSequencerChRem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_REG_SetSequencerChRem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerChRem
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[be]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[da]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[c0]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c4]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetChannelSingleDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[d0]"></a>LL_ADC_SetCommonClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetCommonClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[c6]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[d1]"></a>LL_ADC_SetGainCompensation</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetGainCompensation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetGainCompensation
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[c1]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_SetOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c2]"></a>LL_ADC_SetOffsetSign</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetOffsetSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSign
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c3]"></a>LL_ADC_SetOffsetSignedSaturation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetOffsetSignedSaturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSignedSaturation
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[d2]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32u5xx_hal_adc.o(.text.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetSamplingTimeCommonChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bb]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32u5xx_hal_adc_ex.o(.text.LL_ADC_IsCalibrationOnGoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[ba]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32u5xx_hal_adc_ex.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[dc]"></a>DMA_List_Init</STRONG> (Thumb, 1040 bytes, Stack size 16 bytes, stm32u5xx_hal_dma_ex.o(.text.DMA_List_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_List_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_List_Init
</UL>

<P><STRONG><a name="[11e]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32u5xx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[11a]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, stm32u5xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[11b]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, stm32u5xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ea]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32u5xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[124]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32u5xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32u5xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[e9]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32u5xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32u5xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[ec]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32u5xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[122]"></a>SPI_CloseTransfer</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, stm32u5xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[120]"></a>SPI_GetPacketSize</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32u5xx_hal_spi.o(.text.SPI_GetPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_GetPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[123]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32u5xx_hal_spi.o(.text.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[134]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[135]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[131]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[136]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[133]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[132]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32u5xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[129]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32u5xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[f6]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32u5xx_hal_pcd.o(.text.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32u5xx_hal_pcd.o(.text.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, stm32u5xx_hal_pcd.o(.text.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>USB_CoreReset</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32u5xx_ll_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[17a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[16b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
